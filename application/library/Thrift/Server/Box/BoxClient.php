<?php
namespace Thrift\Server\Box;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface EquipmentCenterServiceIf {
  /**
   * @param \Thrift\Server\Box\Equipment[] $equipment
   * @return string
   * @throws \Thrift\Server\Box\SaveOrUpdateException
   */
  public function addEquipments(array $equipment);
  /**
   * @param \Thrift\Server\Box\UserEquipment $equipment
   * @param string $sncode
   * @return string
   * @throws \Thrift\Server\Box\SaveOrUpdateException
   */
  public function updateEquipmentInfoBySncode(\Thrift\Server\Box\UserEquipment $equipment, $sncode);
  /**
   * @param \Thrift\Server\Box\UserEquipment $equipment
   * @param string $imei
   * @return string
   * @throws \Thrift\Server\Box\SaveOrUpdateException
   */
  public function updateEquipmentInfoByIMEI(\Thrift\Server\Box\UserEquipment $equipment, $imei);
  /**
   * @param \Thrift\Server\Box\UserEquipment $equipment
   * @param string $mac
   * @return string
   * @throws \Thrift\Server\Box\SaveOrUpdateException
   */
  public function updateEquipmentInfoByMAC(\Thrift\Server\Box\UserEquipment $equipment, $mac);
  /**
   * @param string $sncode
   * @return \Thrift\Server\Box\UserEquipment
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentInfoBySncode($sncode);
  /**
   * @param string $imei
   * @return \Thrift\Server\Box\UserEquipment
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentInfoByIMEI($imei);
  /**
   * @param string $mac
   * @return \Thrift\Server\Box\UserEquipment
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentInfoByMAC($mac);
  /**
   * @param string $startTime
   * @param string $endTime
   * @param int $pageSize
   * @param int $currentPage
   * @return \Thrift\Server\Box\PageEquipments
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentInfoByTime($startTime, $endTime, $pageSize, $currentPage);
  /**
   * @param string $startTime
   * @param string $endTime
   * @param int $pageSize
   * @param int $currentPage
   * @return \Thrift\Server\Box\PageBoxWarehouse
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentByTime($startTime, $endTime, $pageSize, $currentPage);
  /**
   * @param string $sncode
   * @return \Thrift\Server\Box\Equipment
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentBySncode($sncode);
  /**
   * @param string $imei
   * @return \Thrift\Server\Box\Equipment
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentByIMEI($imei);
  /**
   * @param string $mac
   * @return \Thrift\Server\Box\Equipment
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchEquipmentByMAC($mac);
  /**
   * @param string $sncode
   * @return \Thrift\Server\Box\Logs[]
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchLogInfoBySncode($sncode);
  /**
   * @param string $imei
   * @return \Thrift\Server\Box\Logs[]
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchLogInfoByIMEI($imei);
  /**
   * @param string $mac
   * @return \Thrift\Server\Box\Logs[]
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function searchLogInfoByMAC($mac);
  /**
   * @param int $pageSize
   * @param int $currentPage
   * @return \Thrift\Server\Box\PageEquipments
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function getEquipmentsByPage($pageSize, $currentPage);
  /**
   * @param string $channel
   * @return string[]
   * @throws \Thrift\Server\Box\DataNotFoundException
   */
  public function getUserEquipmentByChannel($channel);
}

class BoxClient implements \Thrift\Server\Box\EquipmentCenterServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function addEquipments(array $equipment)
  {
    $this->send_addEquipments($equipment);
    return $this->recv_addEquipments();
  }

  public function send_addEquipments(array $equipment)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_addEquipments_args();
    $args->equipment = $equipment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addEquipments', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addEquipments', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addEquipments()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_addEquipments_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_addEquipments_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("addEquipments failed: unknown result");
  }

  public function updateEquipmentInfoBySncode(\Thrift\Server\Box\UserEquipment $equipment, $sncode)
  {
    $this->send_updateEquipmentInfoBySncode($equipment, $sncode);
    return $this->recv_updateEquipmentInfoBySncode();
  }

  public function send_updateEquipmentInfoBySncode(\Thrift\Server\Box\UserEquipment $equipment, $sncode)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoBySncode_args();
    $args->equipment = $equipment;
    $args->sncode = $sncode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEquipmentInfoBySncode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEquipmentInfoBySncode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEquipmentInfoBySncode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoBySncode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoBySncode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("updateEquipmentInfoBySncode failed: unknown result");
  }

  public function updateEquipmentInfoByIMEI(\Thrift\Server\Box\UserEquipment $equipment, $imei)
  {
    $this->send_updateEquipmentInfoByIMEI($equipment, $imei);
    return $this->recv_updateEquipmentInfoByIMEI();
  }

  public function send_updateEquipmentInfoByIMEI(\Thrift\Server\Box\UserEquipment $equipment, $imei)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoByIMEI_args();
    $args->equipment = $equipment;
    $args->imei = $imei;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEquipmentInfoByIMEI', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEquipmentInfoByIMEI', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEquipmentInfoByIMEI()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoByIMEI_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoByIMEI_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("updateEquipmentInfoByIMEI failed: unknown result");
  }

  public function updateEquipmentInfoByMAC(\Thrift\Server\Box\UserEquipment $equipment, $mac)
  {
    $this->send_updateEquipmentInfoByMAC($equipment, $mac);
    return $this->recv_updateEquipmentInfoByMAC();
  }

  public function send_updateEquipmentInfoByMAC(\Thrift\Server\Box\UserEquipment $equipment, $mac)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoByMAC_args();
    $args->equipment = $equipment;
    $args->mac = $mac;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateEquipmentInfoByMAC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateEquipmentInfoByMAC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateEquipmentInfoByMAC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoByMAC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_updateEquipmentInfoByMAC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("updateEquipmentInfoByMAC failed: unknown result");
  }

  public function searchEquipmentInfoBySncode($sncode)
  {
    $this->send_searchEquipmentInfoBySncode($sncode);
    return $this->recv_searchEquipmentInfoBySncode();
  }

  public function send_searchEquipmentInfoBySncode($sncode)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoBySncode_args();
    $args->sncode = $sncode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentInfoBySncode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentInfoBySncode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentInfoBySncode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoBySncode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoBySncode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentInfoBySncode failed: unknown result");
  }

  public function searchEquipmentInfoByIMEI($imei)
  {
    $this->send_searchEquipmentInfoByIMEI($imei);
    return $this->recv_searchEquipmentInfoByIMEI();
  }

  public function send_searchEquipmentInfoByIMEI($imei)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByIMEI_args();
    $args->imei = $imei;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentInfoByIMEI', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentInfoByIMEI', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentInfoByIMEI()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByIMEI_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByIMEI_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentInfoByIMEI failed: unknown result");
  }

  public function searchEquipmentInfoByMAC($mac)
  {
    $this->send_searchEquipmentInfoByMAC($mac);
    return $this->recv_searchEquipmentInfoByMAC();
  }

  public function send_searchEquipmentInfoByMAC($mac)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByMAC_args();
    $args->mac = $mac;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentInfoByMAC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentInfoByMAC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentInfoByMAC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByMAC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByMAC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentInfoByMAC failed: unknown result");
  }

  public function searchEquipmentInfoByTime($startTime, $endTime, $pageSize, $currentPage)
  {
    $this->send_searchEquipmentInfoByTime($startTime, $endTime, $pageSize, $currentPage);
    return $this->recv_searchEquipmentInfoByTime();
  }

  public function send_searchEquipmentInfoByTime($startTime, $endTime, $pageSize, $currentPage)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByTime_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $args->pageSize = $pageSize;
    $args->currentPage = $currentPage;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentInfoByTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentInfoByTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentInfoByTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentInfoByTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentInfoByTime failed: unknown result");
  }

  public function searchEquipmentByTime($startTime, $endTime, $pageSize, $currentPage)
  {
    $this->send_searchEquipmentByTime($startTime, $endTime, $pageSize, $currentPage);
    return $this->recv_searchEquipmentByTime();
  }

  public function send_searchEquipmentByTime($startTime, $endTime, $pageSize, $currentPage)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentByTime_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $args->pageSize = $pageSize;
    $args->currentPage = $currentPage;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentByTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentByTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentByTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentByTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentByTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentByTime failed: unknown result");
  }

  public function searchEquipmentBySncode($sncode)
  {
    $this->send_searchEquipmentBySncode($sncode);
    return $this->recv_searchEquipmentBySncode();
  }

  public function send_searchEquipmentBySncode($sncode)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentBySncode_args();
    $args->sncode = $sncode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentBySncode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentBySncode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentBySncode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentBySncode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentBySncode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentBySncode failed: unknown result");
  }

  public function searchEquipmentByIMEI($imei)
  {
    $this->send_searchEquipmentByIMEI($imei);
    return $this->recv_searchEquipmentByIMEI();
  }

  public function send_searchEquipmentByIMEI($imei)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentByIMEI_args();
    $args->imei = $imei;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentByIMEI', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentByIMEI', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentByIMEI()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentByIMEI_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentByIMEI_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentByIMEI failed: unknown result");
  }

  public function searchEquipmentByMAC($mac)
  {
    $this->send_searchEquipmentByMAC($mac);
    return $this->recv_searchEquipmentByMAC();
  }

  public function send_searchEquipmentByMAC($mac)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentByMAC_args();
    $args->mac = $mac;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchEquipmentByMAC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchEquipmentByMAC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchEquipmentByMAC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchEquipmentByMAC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchEquipmentByMAC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchEquipmentByMAC failed: unknown result");
  }

  public function searchLogInfoBySncode($sncode)
  {
    $this->send_searchLogInfoBySncode($sncode);
    return $this->recv_searchLogInfoBySncode();
  }

  public function send_searchLogInfoBySncode($sncode)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchLogInfoBySncode_args();
    $args->sncode = $sncode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchLogInfoBySncode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchLogInfoBySncode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchLogInfoBySncode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchLogInfoBySncode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchLogInfoBySncode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchLogInfoBySncode failed: unknown result");
  }

  public function searchLogInfoByIMEI($imei)
  {
    $this->send_searchLogInfoByIMEI($imei);
    return $this->recv_searchLogInfoByIMEI();
  }

  public function send_searchLogInfoByIMEI($imei)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchLogInfoByIMEI_args();
    $args->imei = $imei;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchLogInfoByIMEI', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchLogInfoByIMEI', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchLogInfoByIMEI()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchLogInfoByIMEI_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchLogInfoByIMEI_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchLogInfoByIMEI failed: unknown result");
  }

  public function searchLogInfoByMAC($mac)
  {
    $this->send_searchLogInfoByMAC($mac);
    return $this->recv_searchLogInfoByMAC();
  }

  public function send_searchLogInfoByMAC($mac)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_searchLogInfoByMAC_args();
    $args->mac = $mac;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'searchLogInfoByMAC', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('searchLogInfoByMAC', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_searchLogInfoByMAC()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_searchLogInfoByMAC_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_searchLogInfoByMAC_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("searchLogInfoByMAC failed: unknown result");
  }

  public function getEquipmentsByPage($pageSize, $currentPage)
  {
    $this->send_getEquipmentsByPage($pageSize, $currentPage);
    return $this->recv_getEquipmentsByPage();
  }

  public function send_getEquipmentsByPage($pageSize, $currentPage)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_getEquipmentsByPage_args();
    $args->pageSize = $pageSize;
    $args->currentPage = $currentPage;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getEquipmentsByPage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getEquipmentsByPage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getEquipmentsByPage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_getEquipmentsByPage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_getEquipmentsByPage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("getEquipmentsByPage failed: unknown result");
  }

  public function getUserEquipmentByChannel($channel)
  {
    $this->send_getUserEquipmentByChannel($channel);
    return $this->recv_getUserEquipmentByChannel();
  }

  public function send_getUserEquipmentByChannel($channel)
  {
    $args = new \Thrift\Server\Box\EquipmentCenterService_getUserEquipmentByChannel_args();
    $args->channel = $channel;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserEquipmentByChannel', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserEquipmentByChannel', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserEquipmentByChannel()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Box\EquipmentCenterService_getUserEquipmentByChannel_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Box\EquipmentCenterService_getUserEquipmentByChannel_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->dataNotFound !== null) {
      throw $result->dataNotFound;
    }
    throw new \Exception("getUserEquipmentByChannel failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class EquipmentCenterService_addEquipments_args {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\Equipment[]
   */
  public $equipment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'equipment',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Box\Equipment',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['equipment'])) {
        $this->equipment = $vals['equipment'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_addEquipments_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->equipment = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \Thrift\Server\Box\Equipment();
              $xfer += $elem19->read($input);
              $this->equipment []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_addEquipments_args');
    if ($this->equipment !== null) {
      if (!is_array($this->equipment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('equipment', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->equipment));
        {
          foreach ($this->equipment as $iter20)
          {
            $iter20 = new \Thrift\Server\Box\UserEquipment($iter20);
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_addEquipments_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\SaveOrUpdateException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\SaveOrUpdateException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_addEquipments_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \Thrift\Server\Box\SaveOrUpdateException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_addEquipments_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_updateEquipmentInfoBySncode_args {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\UserEquipment
   */
  public $equipment = null;
  /**
   * @var string
   */
  public $sncode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'equipment',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\UserEquipment',
          ),
        2 => array(
          'var' => 'sncode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['equipment'])) {
        $this->equipment = $vals['equipment'];
      }
      if (isset($vals['sncode'])) {
        $this->sncode = $vals['sncode'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_updateEquipmentInfoBySncode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->equipment = new \Thrift\Server\Box\UserEquipment();
            $xfer += $this->equipment->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sncode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_updateEquipmentInfoBySncode_args');
    if ($this->equipment !== null) {
      if (!is_object($this->equipment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('equipment', TType::STRUCT, 1);
      $xfer += $this->equipment->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sncode !== null) {
      $xfer += $output->writeFieldBegin('sncode', TType::STRING, 2);
      $xfer += $output->writeString($this->sncode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_updateEquipmentInfoBySncode_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\SaveOrUpdateException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\SaveOrUpdateException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_updateEquipmentInfoBySncode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \Thrift\Server\Box\SaveOrUpdateException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_updateEquipmentInfoBySncode_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_updateEquipmentInfoByIMEI_args {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\UserEquipment
   */
  public $equipment = null;
  /**
   * @var string
   */
  public $imei = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'equipment',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\UserEquipment',
          ),
        2 => array(
          'var' => 'imei',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['equipment'])) {
        $this->equipment = $vals['equipment'];
      }
      if (isset($vals['imei'])) {
        $this->imei = $vals['imei'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_updateEquipmentInfoByIMEI_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->equipment = new \Thrift\Server\Box\UserEquipment();
            $xfer += $this->equipment->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imei);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_updateEquipmentInfoByIMEI_args');
    if ($this->equipment !== null) {
      if (!is_object($this->equipment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('equipment', TType::STRUCT, 1);
      $xfer += $this->equipment->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imei !== null) {
      $xfer += $output->writeFieldBegin('imei', TType::STRING, 2);
      $xfer += $output->writeString($this->imei);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_updateEquipmentInfoByIMEI_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\SaveOrUpdateException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\SaveOrUpdateException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_updateEquipmentInfoByIMEI_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \Thrift\Server\Box\SaveOrUpdateException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_updateEquipmentInfoByIMEI_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_updateEquipmentInfoByMAC_args {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\UserEquipment
   */
  public $equipment = null;
  /**
   * @var string
   */
  public $mac = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'equipment',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\UserEquipment',
          ),
        2 => array(
          'var' => 'mac',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['equipment'])) {
        $this->equipment = $vals['equipment'];
      }
      if (isset($vals['mac'])) {
        $this->mac = $vals['mac'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_updateEquipmentInfoByMAC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->equipment = new \Thrift\Server\Box\UserEquipment();
            $xfer += $this->equipment->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_updateEquipmentInfoByMAC_args');
    if ($this->equipment !== null) {
      if (!is_object($this->equipment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('equipment', TType::STRUCT, 1);
      $xfer += $this->equipment->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mac !== null) {
      $xfer += $output->writeFieldBegin('mac', TType::STRING, 2);
      $xfer += $output->writeString($this->mac);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_updateEquipmentInfoByMAC_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\SaveOrUpdateException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\SaveOrUpdateException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_updateEquipmentInfoByMAC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \Thrift\Server\Box\SaveOrUpdateException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_updateEquipmentInfoByMAC_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoBySncode_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $sncode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sncode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sncode'])) {
        $this->sncode = $vals['sncode'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoBySncode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sncode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoBySncode_args');
    if ($this->sncode !== null) {
      $xfer += $output->writeFieldBegin('sncode', TType::STRING, 1);
      $xfer += $output->writeString($this->sncode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoBySncode_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\UserEquipment
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\UserEquipment',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoBySncode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\UserEquipment();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoBySncode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoByIMEI_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $imei = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'imei',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['imei'])) {
        $this->imei = $vals['imei'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoByIMEI_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imei);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoByIMEI_args');
    if ($this->imei !== null) {
      $xfer += $output->writeFieldBegin('imei', TType::STRING, 1);
      $xfer += $output->writeString($this->imei);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoByIMEI_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\UserEquipment
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\UserEquipment',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoByIMEI_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\UserEquipment();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoByIMEI_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoByMAC_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mac = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mac',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mac'])) {
        $this->mac = $vals['mac'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoByMAC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoByMAC_args');
    if ($this->mac !== null) {
      $xfer += $output->writeFieldBegin('mac', TType::STRING, 1);
      $xfer += $output->writeString($this->mac);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoByMAC_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\UserEquipment
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\UserEquipment',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoByMAC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\UserEquipment();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoByMAC_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoByTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $currentPage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'currentPage',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['currentPage'])) {
        $this->currentPage = $vals['currentPage'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoByTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoByTime_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentPage !== null) {
      $xfer += $output->writeFieldBegin('currentPage', TType::I32, 4);
      $xfer += $output->writeI32($this->currentPage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentInfoByTime_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\PageEquipments
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\PageEquipments',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentInfoByTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\PageEquipments();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentInfoByTime_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentByTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $currentPage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'currentPage',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['currentPage'])) {
        $this->currentPage = $vals['currentPage'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentByTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentByTime_args');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 1);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 2);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentPage !== null) {
      $xfer += $output->writeFieldBegin('currentPage', TType::I32, 4);
      $xfer += $output->writeI32($this->currentPage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentByTime_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\PageBoxWarehouse
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\PageBoxWarehouse',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentByTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\PageBoxWarehouse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentByTime_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentBySncode_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $sncode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sncode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sncode'])) {
        $this->sncode = $vals['sncode'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentBySncode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sncode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentBySncode_args');
    if ($this->sncode !== null) {
      $xfer += $output->writeFieldBegin('sncode', TType::STRING, 1);
      $xfer += $output->writeString($this->sncode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentBySncode_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\Equipment
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\Equipment',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentBySncode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\Equipment();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentBySncode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentByIMEI_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $imei = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'imei',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['imei'])) {
        $this->imei = $vals['imei'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentByIMEI_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imei);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentByIMEI_args');
    if ($this->imei !== null) {
      $xfer += $output->writeFieldBegin('imei', TType::STRING, 1);
      $xfer += $output->writeString($this->imei);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentByIMEI_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\Equipment
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\Equipment',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentByIMEI_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\Equipment();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentByIMEI_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentByMAC_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mac = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mac',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mac'])) {
        $this->mac = $vals['mac'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentByMAC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentByMAC_args');
    if ($this->mac !== null) {
      $xfer += $output->writeFieldBegin('mac', TType::STRING, 1);
      $xfer += $output->writeString($this->mac);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchEquipmentByMAC_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\Equipment
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\Equipment',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchEquipmentByMAC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\Equipment();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchEquipmentByMAC_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchLogInfoBySncode_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $sncode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sncode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sncode'])) {
        $this->sncode = $vals['sncode'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchLogInfoBySncode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sncode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchLogInfoBySncode_args');
    if ($this->sncode !== null) {
      $xfer += $output->writeFieldBegin('sncode', TType::STRING, 1);
      $xfer += $output->writeString($this->sncode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchLogInfoBySncode_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\Logs[]
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Box\Logs',
            ),
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchLogInfoBySncode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Thrift\Server\Box\Logs();
              $xfer += $elem26->read($input);
              $this->success []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchLogInfoBySncode_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchLogInfoByIMEI_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $imei = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'imei',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['imei'])) {
        $this->imei = $vals['imei'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchLogInfoByIMEI_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imei);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchLogInfoByIMEI_args');
    if ($this->imei !== null) {
      $xfer += $output->writeFieldBegin('imei', TType::STRING, 1);
      $xfer += $output->writeString($this->imei);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchLogInfoByIMEI_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\Logs[]
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Box\Logs',
            ),
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchLogInfoByIMEI_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Thrift\Server\Box\Logs();
              $xfer += $elem33->read($input);
              $this->success []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchLogInfoByIMEI_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchLogInfoByMAC_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mac = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mac',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mac'])) {
        $this->mac = $vals['mac'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchLogInfoByMAC_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mac);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchLogInfoByMAC_args');
    if ($this->mac !== null) {
      $xfer += $output->writeFieldBegin('mac', TType::STRING, 1);
      $xfer += $output->writeString($this->mac);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_searchLogInfoByMAC_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\Logs[]
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Box\Logs',
            ),
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_searchLogInfoByMAC_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Thrift\Server\Box\Logs();
              $xfer += $elem40->read($input);
              $this->success []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_searchLogInfoByMAC_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_getEquipmentsByPage_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $currentPage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentPage',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['currentPage'])) {
        $this->currentPage = $vals['currentPage'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_getEquipmentsByPage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_getEquipmentsByPage_args');
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 1);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentPage !== null) {
      $xfer += $output->writeFieldBegin('currentPage', TType::I32, 2);
      $xfer += $output->writeI32($this->currentPage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_getEquipmentsByPage_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Box\PageEquipments
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\PageEquipments',
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_getEquipmentsByPage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Box\PageEquipments();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_getEquipmentsByPage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_getUserEquipmentByChannel_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $channel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_getUserEquipmentByChannel_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_getUserEquipmentByChannel_args');
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 1);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EquipmentCenterService_getUserEquipmentByChannel_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \Thrift\Server\Box\DataNotFoundException
   */
  public $dataNotFound = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'dataNotFound',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Box\DataNotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['dataNotFound'])) {
        $this->dataNotFound = $vals['dataNotFound'];
      }
    }
  }

  public function getName() {
    return 'EquipmentCenterService_getUserEquipmentByChannel_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->success []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->dataNotFound = new \Thrift\Server\Box\DataNotFoundException();
            $xfer += $this->dataNotFound->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EquipmentCenterService_getUserEquipmentByChannel_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter48)
          {
            $xfer += $output->writeString($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataNotFound !== null) {
      $xfer += $output->writeFieldBegin('dataNotFound', TType::STRUCT, 1);
      $xfer += $this->dataNotFound->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


