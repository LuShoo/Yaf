<?php
namespace Thrift\Server;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Packages {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $packageName = null;
  /**
   * @var string
   */
  public $packageProvderName = null;
  /**
   * @var int
   */
  public $packageLocalBytes = null;
  /**
   * @var int
   */
  public $localBytesPerMonth = null;
  /**
   * @var string
   */
  public $localValidity = null;
  /**
   * @var int
   */
  public $localCleanPerMonth = null;
  /**
   * @var int
   */
  public $packageMainlandBytes = null;
  /**
   * @var int
   */
  public $mainlandBytesPerMonth = null;
  /**
   * @var string
   */
  public $mainlandValidity = null;
  /**
   * @var int
   */
  public $mainlandCleanPerMonth = null;
  /**
   * @var int
   */
  public $reCharge = null;
  /**
   * @var int
   */
  public $expiredBeforeActivity = null;
  /**
   * @var int
   */
  public $expiredBeforeRecharge = null;
  /**
   * @var string
   */
  public $packageCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageProvderName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'packageLocalBytes',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'localBytesPerMonth',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'localValidity',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'localCleanPerMonth',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'packageMainlandBytes',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'mainlandBytesPerMonth',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'mainlandValidity',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'mainlandCleanPerMonth',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'reCharge',
          'type' => TType::I16,
          ),
        13 => array(
          'var' => 'expiredBeforeActivity',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'expiredBeforeRecharge',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'packageCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['packageProvderName'])) {
        $this->packageProvderName = $vals['packageProvderName'];
      }
      if (isset($vals['packageLocalBytes'])) {
        $this->packageLocalBytes = $vals['packageLocalBytes'];
      }
      if (isset($vals['localBytesPerMonth'])) {
        $this->localBytesPerMonth = $vals['localBytesPerMonth'];
      }
      if (isset($vals['localValidity'])) {
        $this->localValidity = $vals['localValidity'];
      }
      if (isset($vals['localCleanPerMonth'])) {
        $this->localCleanPerMonth = $vals['localCleanPerMonth'];
      }
      if (isset($vals['packageMainlandBytes'])) {
        $this->packageMainlandBytes = $vals['packageMainlandBytes'];
      }
      if (isset($vals['mainlandBytesPerMonth'])) {
        $this->mainlandBytesPerMonth = $vals['mainlandBytesPerMonth'];
      }
      if (isset($vals['mainlandValidity'])) {
        $this->mainlandValidity = $vals['mainlandValidity'];
      }
      if (isset($vals['mainlandCleanPerMonth'])) {
        $this->mainlandCleanPerMonth = $vals['mainlandCleanPerMonth'];
      }
      if (isset($vals['reCharge'])) {
        $this->reCharge = $vals['reCharge'];
      }
      if (isset($vals['expiredBeforeActivity'])) {
        $this->expiredBeforeActivity = $vals['expiredBeforeActivity'];
      }
      if (isset($vals['expiredBeforeRecharge'])) {
        $this->expiredBeforeRecharge = $vals['expiredBeforeRecharge'];
      }
      if (isset($vals['packageCode'])) {
        $this->packageCode = $vals['packageCode'];
      }
    }
  }

  public function getName() {
    return 'Packages';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageProvderName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageLocalBytes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->localBytesPerMonth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->localValidity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->localCleanPerMonth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageMainlandBytes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mainlandBytesPerMonth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mainlandValidity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->mainlandCleanPerMonth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->reCharge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expiredBeforeActivity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expiredBeforeRecharge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Packages');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 2);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageProvderName !== null) {
      $xfer += $output->writeFieldBegin('packageProvderName', TType::STRING, 3);
      $xfer += $output->writeString($this->packageProvderName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageLocalBytes !== null) {
      $xfer += $output->writeFieldBegin('packageLocalBytes', TType::I64, 4);
      $xfer += $output->writeI64($this->packageLocalBytes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localBytesPerMonth !== null) {
      $xfer += $output->writeFieldBegin('localBytesPerMonth', TType::I64, 5);
      $xfer += $output->writeI64($this->localBytesPerMonth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localValidity !== null) {
      $xfer += $output->writeFieldBegin('localValidity', TType::STRING, 6);
      $xfer += $output->writeString($this->localValidity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localCleanPerMonth !== null) {
      $xfer += $output->writeFieldBegin('localCleanPerMonth', TType::I16, 7);
      $xfer += $output->writeI16($this->localCleanPerMonth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageMainlandBytes !== null) {
      $xfer += $output->writeFieldBegin('packageMainlandBytes', TType::I64, 8);
      $xfer += $output->writeI64($this->packageMainlandBytes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainlandBytesPerMonth !== null) {
      $xfer += $output->writeFieldBegin('mainlandBytesPerMonth', TType::I64, 9);
      $xfer += $output->writeI64($this->mainlandBytesPerMonth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainlandValidity !== null) {
      $xfer += $output->writeFieldBegin('mainlandValidity', TType::STRING, 10);
      $xfer += $output->writeString($this->mainlandValidity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainlandCleanPerMonth !== null) {
      $xfer += $output->writeFieldBegin('mainlandCleanPerMonth', TType::I16, 11);
      $xfer += $output->writeI16($this->mainlandCleanPerMonth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reCharge !== null) {
      $xfer += $output->writeFieldBegin('reCharge', TType::I16, 12);
      $xfer += $output->writeI16($this->reCharge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredBeforeActivity !== null) {
      $xfer += $output->writeFieldBegin('expiredBeforeActivity', TType::I32, 13);
      $xfer += $output->writeI32($this->expiredBeforeActivity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredBeforeRecharge !== null) {
      $xfer += $output->writeFieldBegin('expiredBeforeRecharge', TType::I32, 14);
      $xfer += $output->writeI32($this->expiredBeforeRecharge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageCode !== null) {
      $xfer += $output->writeFieldBegin('packageCode', TType::STRING, 15);
      $xfer += $output->writeString($this->packageCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Cards {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $packageID = null;
  /**
   * @var string
   */
  public $ccID = null;
  /**
   * @var string
   */
  public $telephone = null;
  /**
   * @var string
   */
  public $batch = null;
  /**
   * @var string
   */
  public $producedAt = null;
  /**
   * @var int
   */
  public $development = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ccID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'telephone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'batch',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'producedAt',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'development',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['ccID'])) {
        $this->ccID = $vals['ccID'];
      }
      if (isset($vals['telephone'])) {
        $this->telephone = $vals['telephone'];
      }
      if (isset($vals['batch'])) {
        $this->batch = $vals['batch'];
      }
      if (isset($vals['producedAt'])) {
        $this->producedAt = $vals['producedAt'];
      }
      if (isset($vals['development'])) {
        $this->development = $vals['development'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'Cards';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telephone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->producedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->development);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Cards');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccID !== null) {
      $xfer += $output->writeFieldBegin('ccID', TType::STRING, 3);
      $xfer += $output->writeString($this->ccID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telephone !== null) {
      $xfer += $output->writeFieldBegin('telephone', TType::STRING, 4);
      $xfer += $output->writeString($this->telephone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batch !== null) {
      $xfer += $output->writeFieldBegin('batch', TType::STRING, 5);
      $xfer += $output->writeString($this->batch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->producedAt !== null) {
      $xfer += $output->writeFieldBegin('producedAt', TType::STRING, 6);
      $xfer += $output->writeString($this->producedAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->development !== null) {
      $xfer += $output->writeFieldBegin('development', TType::I16, 7);
      $xfer += $output->writeI16($this->development);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I16, 8);
      $xfer += $output->writeI16($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PageCards {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Cards[]
   */
  public $cards = null;
  /**
   * @var int
   */
  public $totalPage = null;
  /**
   * @var int
   */
  public $totalNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cards',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Cards',
            ),
          ),
        2 => array(
          'var' => 'totalPage',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cards'])) {
        $this->cards = $vals['cards'];
      }
      if (isset($vals['totalPage'])) {
        $this->totalPage = $vals['totalPage'];
      }
      if (isset($vals['totalNumber'])) {
        $this->totalNumber = $vals['totalNumber'];
      }
    }
  }

  public function getName() {
    return 'PageCards';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->cards = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Thrift\Server\Cards();
              $xfer += $elem5->read($input);
              $this->cards []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageCards');
    if ($this->cards !== null) {
      if (!is_array($this->cards)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cards', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->cards));
        {
          foreach ($this->cards as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalPage !== null) {
      $xfer += $output->writeFieldBegin('totalPage', TType::I32, 2);
      $xfer += $output->writeI32($this->totalPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNumber !== null) {
      $xfer += $output->writeFieldBegin('totalNumber', TType::I32, 3);
      $xfer += $output->writeI32($this->totalNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PagePackages {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Packages[]
   */
  public $packages = null;
  /**
   * @var int
   */
  public $totalPage = null;
  /**
   * @var int
   */
  public $totalNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Packages',
            ),
          ),
        2 => array(
          'var' => 'totalPage',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packages'])) {
        $this->packages = $vals['packages'];
      }
      if (isset($vals['totalPage'])) {
        $this->totalPage = $vals['totalPage'];
      }
      if (isset($vals['totalNumber'])) {
        $this->totalNumber = $vals['totalNumber'];
      }
    }
  }

  public function getName() {
    return 'PagePackages';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packages = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Thrift\Server\Packages();
              $xfer += $elem12->read($input);
              $this->packages []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PagePackages');
    if ($this->packages !== null) {
      if (!is_array($this->packages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packages', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->packages));
        {
          foreach ($this->packages as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalPage !== null) {
      $xfer += $output->writeFieldBegin('totalPage', TType::I32, 2);
      $xfer += $output->writeI32($this->totalPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNumber !== null) {
      $xfer += $output->writeFieldBegin('totalNumber', TType::I32, 3);
      $xfer += $output->writeI32($this->totalNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Recharges {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $telephone = null;
  /**
   * @var string
   */
  public $rechargedAt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'telephone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'rechargedAt',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['telephone'])) {
        $this->telephone = $vals['telephone'];
      }
      if (isset($vals['rechargedAt'])) {
        $this->rechargedAt = $vals['rechargedAt'];
      }
    }
  }

  public function getName() {
    return 'Recharges';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->telephone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rechargedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Recharges');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->telephone !== null) {
      $xfer += $output->writeFieldBegin('telephone', TType::STRING, 2);
      $xfer += $output->writeString($this->telephone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rechargedAt !== null) {
      $xfer += $output->writeFieldBegin('rechargedAt', TType::STRING, 3);
      $xfer += $output->writeString($this->rechargedAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DataNotFoundException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'DataNotFoundException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DataNotFoundException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SaveOrUpdateException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SaveOrUpdateException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SaveOrUpdateException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


