<?php
namespace Thrift\Server\Erp;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Logistics {
  static $_TSPEC;

  /**
   * @var string
   */
  public $goodsStatus = null;
  /**
   * @var string
   */
  public $logisiticsCompanyName = null;
  /**
   * @var string
   */
  public $logisiticsOrderNumber = null;
  /**
   * @var string
   */
  public $logisiticsContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'goodsStatus',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'logisiticsCompanyName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'logisiticsOrderNumber',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'logisiticsContent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['goodsStatus'])) {
        $this->goodsStatus = $vals['goodsStatus'];
      }
      if (isset($vals['logisiticsCompanyName'])) {
        $this->logisiticsCompanyName = $vals['logisiticsCompanyName'];
      }
      if (isset($vals['logisiticsOrderNumber'])) {
        $this->logisiticsOrderNumber = $vals['logisiticsOrderNumber'];
      }
      if (isset($vals['logisiticsContent'])) {
        $this->logisiticsContent = $vals['logisiticsContent'];
      }
    }
  }

  public function getName() {
    return 'Logistics';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goodsStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logisiticsCompanyName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logisiticsOrderNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logisiticsContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Logistics');
    if ($this->goodsStatus !== null) {
      $xfer += $output->writeFieldBegin('goodsStatus', TType::STRING, 1);
      $xfer += $output->writeString($this->goodsStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logisiticsCompanyName !== null) {
      $xfer += $output->writeFieldBegin('logisiticsCompanyName', TType::STRING, 2);
      $xfer += $output->writeString($this->logisiticsCompanyName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logisiticsOrderNumber !== null) {
      $xfer += $output->writeFieldBegin('logisiticsOrderNumber', TType::STRING, 3);
      $xfer += $output->writeString($this->logisiticsOrderNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logisiticsContent !== null) {
      $xfer += $output->writeFieldBegin('logisiticsContent', TType::STRING, 4);
      $xfer += $output->writeString($this->logisiticsContent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}
