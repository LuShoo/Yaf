<?php
namespace Thrift\Server\Erp;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class AgentOrder {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $aid = null;
  /**
   * @var string
   */
  public $agentName = null;
  /**
   * @var int
   */
  public $boxtotal = null;
  /**
   * @var string
   */
  public $sku = "";
  /**
   * @var string
   */
  public $demo = "";
  /**
   * @var string
   */
  public $createdAt = null;
  /**
   * @var string
   */
  public $updatedAt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'aid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'agentName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'boxtotal',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'sku',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'demo',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'createdAt',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'updatedAt',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['aid'])) {
        $this->aid = $vals['aid'];
      }
      if (isset($vals['agentName'])) {
        $this->agentName = $vals['agentName'];
      }
      if (isset($vals['boxtotal'])) {
        $this->boxtotal = $vals['boxtotal'];
      }
      if (isset($vals['sku'])) {
        $this->sku = $vals['sku'];
      }
      if (isset($vals['demo'])) {
        $this->demo = $vals['demo'];
      }
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
      if (isset($vals['updatedAt'])) {
        $this->updatedAt = $vals['updatedAt'];
      }
    }
  }

  public function getName() {
    return 'AgentOrder';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->aid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->agentName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->boxtotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sku);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->demo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updatedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AgentOrder');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aid !== null) {
      $xfer += $output->writeFieldBegin('aid', TType::I32, 2);
      $xfer += $output->writeI32($this->aid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agentName !== null) {
      $xfer += $output->writeFieldBegin('agentName', TType::STRING, 3);
      $xfer += $output->writeString($this->agentName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxtotal !== null) {
      $xfer += $output->writeFieldBegin('boxtotal', TType::I32, 4);
      $xfer += $output->writeI32($this->boxtotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku !== null) {
      $xfer += $output->writeFieldBegin('sku', TType::STRING, 5);
      $xfer += $output->writeString($this->sku);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->demo !== null) {
      $xfer += $output->writeFieldBegin('demo', TType::STRING, 6);
      $xfer += $output->writeString($this->demo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::STRING, 7);
      $xfer += $output->writeString($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedAt !== null) {
      $xfer += $output->writeFieldBegin('updatedAt', TType::STRING, 8);
      $xfer += $output->writeString($this->updatedAt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}