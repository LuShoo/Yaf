<?php
namespace Thrift\Server\Erp;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class OrderWare {
  static $_TSPEC;

  /**
   * @var string
   */
  public $wareName = null;
  /**
   * @var double
   */
  public $criterionPrice = null;
  /**
   * @var string
   */
  public $wareCode = null;
  /**
   * @var \Thrift\Server\Erp\OnlyCode[]
   */
  public $onlyCodes = null;
  /**
   * @var string
   */
  public $remark = null;
  /**
   * @var string
   */
  public $wareDetailName = null;
  /**
   * @var string
   */
  public $wareColor = null;
  /**
   * @var string
   */
  public $wareStandardCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wareName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criterionPrice',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'wareCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'onlyCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Erp\OnlyCode',
            ),
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'wareDetailName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'wareColor',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'wareStandardCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wareName'])) {
        $this->wareName = $vals['wareName'];
      }
      if (isset($vals['criterionPrice'])) {
        $this->criterionPrice = $vals['criterionPrice'];
      }
      if (isset($vals['wareCode'])) {
        $this->wareCode = $vals['wareCode'];
      }
      if (isset($vals['onlyCodes'])) {
        $this->onlyCodes = $vals['onlyCodes'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['wareDetailName'])) {
        $this->wareDetailName = $vals['wareDetailName'];
      }
      if (isset($vals['wareColor'])) {
        $this->wareColor = $vals['wareColor'];
      }
      if (isset($vals['wareStandardCode'])) {
        $this->wareStandardCode = $vals['wareStandardCode'];
      }
    }
  }

  public function getName() {
    return 'OrderWare';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wareName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->criterionPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wareCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->onlyCodes = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Thrift\Server\Erp\OnlyCode();
              $xfer += $elem5->read($input);
              $this->onlyCodes []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wareDetailName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wareColor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wareStandardCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderWare');
    if ($this->wareName !== null) {
      $xfer += $output->writeFieldBegin('wareName', TType::STRING, 1);
      $xfer += $output->writeString($this->wareName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criterionPrice !== null) {
      $xfer += $output->writeFieldBegin('criterionPrice', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->criterionPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wareCode !== null) {
      $xfer += $output->writeFieldBegin('wareCode', TType::STRING, 3);
      $xfer += $output->writeString($this->wareCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onlyCodes !== null) {
      if (!is_array($this->onlyCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('onlyCodes', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->onlyCodes));
        {
          foreach ($this->onlyCodes as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 5);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wareDetailName !== null) {
      $xfer += $output->writeFieldBegin('wareDetailName', TType::STRING, 6);
      $xfer += $output->writeString($this->wareDetailName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wareColor !== null) {
      $xfer += $output->writeFieldBegin('wareColor', TType::STRING, 7);
      $xfer += $output->writeString($this->wareColor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wareStandardCode !== null) {
      $xfer += $output->writeFieldBegin('wareStandardCode', TType::STRING, 8);
      $xfer += $output->writeString($this->wareStandardCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}
