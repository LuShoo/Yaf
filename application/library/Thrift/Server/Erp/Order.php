<?php
namespace Thrift\Server\Erp;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;



class Order {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $takePerson = null;
  /**
   * @var string
   */
  public $takePersonFixedPhone = null;
  /**
   * @var string
   */
  public $takePersonPhone = null;
  /**
   * @var string
   */
  public $takePersonAddress = null;
  /**
   * @var double
   */
  public $number = null;
  /**
   * @var double
   */
  public $agio = null;
  /**
   * @var double
   */
  public $IntegererestMoney = null;
  /**
   * @var double
   */
  public $factMoney = null;
  /**
   * @var double
   */
  public $gatherMoney = null;
  /**
   * @var string
   */
  public $orderStatus = null;
  /**
   * @var string
   */
  public $sourceOrderNumber = null;
  /**
   * @var \Thrift\Server\Erp\OrderWare[]
   */
  public $orderWares = null;
  /**
   * @var \Thrift\Server\Erp\Insider
   */
  public $insider = null;
  /**
   * @var string
   */
  public $orderfromSource = null;
  /**
   * @var string
   */
  public $placeOrderDate = null;
  /**
   * @var string
   */
  public $deliverGoodsDate = null;
  /**
   * @var string
   */
  public $payTime = null;
  /**
   * @var string
   */
  public $orderMakeDate = null;
  /**
   * @var string
   */
  public $modifyTime = null;
  /**
   * @var string
   */
  public $logisticsOrder = null;
  /**
   * @var string
   */
  public $logisticsFirmName = null;
  /**
   * @var double
   */
  public $money = null;
  /**
   * @var string
   */
  public $ducumentOrderNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'takePerson',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'takePersonFixedPhone',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'takePersonPhone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'takePersonAddress',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'number',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'agio',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'IntegererestMoney',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'factMoney',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'gatherMoney',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'orderStatus',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'sourceOrderNumber',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'orderWares',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Erp\OrderWare',
            ),
          ),
        14 => array(
          'var' => 'insider',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Erp\Insider',
          ),
        15 => array(
          'var' => 'orderfromSource',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'placeOrderDate',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'deliverGoodsDate',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'payTime',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'orderMakeDate',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'modifyTime',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'logisticsOrder',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'logisticsFirmName',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'money',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'ducumentOrderNumber',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['takePerson'])) {
        $this->takePerson = $vals['takePerson'];
      }
      if (isset($vals['takePersonFixedPhone'])) {
        $this->takePersonFixedPhone = $vals['takePersonFixedPhone'];
      }
      if (isset($vals['takePersonPhone'])) {
        $this->takePersonPhone = $vals['takePersonPhone'];
      }
      if (isset($vals['takePersonAddress'])) {
        $this->takePersonAddress = $vals['takePersonAddress'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['agio'])) {
        $this->agio = $vals['agio'];
      }
      if (isset($vals['IntegererestMoney'])) {
        $this->IntegererestMoney = $vals['IntegererestMoney'];
      }
      if (isset($vals['factMoney'])) {
        $this->factMoney = $vals['factMoney'];
      }
      if (isset($vals['gatherMoney'])) {
        $this->gatherMoney = $vals['gatherMoney'];
      }
      if (isset($vals['orderStatus'])) {
        $this->orderStatus = $vals['orderStatus'];
      }
      if (isset($vals['sourceOrderNumber'])) {
        $this->sourceOrderNumber = $vals['sourceOrderNumber'];
      }
      if (isset($vals['orderWares'])) {
        $this->orderWares = $vals['orderWares'];
      }
      if (isset($vals['insider'])) {
        $this->insider = $vals['insider'];
      }
      if (isset($vals['orderfromSource'])) {
        $this->orderfromSource = $vals['orderfromSource'];
      }
      if (isset($vals['placeOrderDate'])) {
        $this->placeOrderDate = $vals['placeOrderDate'];
      }
      if (isset($vals['deliverGoodsDate'])) {
        $this->deliverGoodsDate = $vals['deliverGoodsDate'];
      }
      if (isset($vals['payTime'])) {
        $this->payTime = $vals['payTime'];
      }
      if (isset($vals['orderMakeDate'])) {
        $this->orderMakeDate = $vals['orderMakeDate'];
      }
      if (isset($vals['modifyTime'])) {
        $this->modifyTime = $vals['modifyTime'];
      }
      if (isset($vals['logisticsOrder'])) {
        $this->logisticsOrder = $vals['logisticsOrder'];
      }
      if (isset($vals['logisticsFirmName'])) {
        $this->logisticsFirmName = $vals['logisticsFirmName'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['ducumentOrderNumber'])) {
        $this->ducumentOrderNumber = $vals['ducumentOrderNumber'];
      }
    }
  }

  public function getName() {
    return 'Order';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->takePerson);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->takePersonFixedPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->takePersonPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->takePersonAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->agio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->IntegererestMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->factMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gatherMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sourceOrderNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->orderWares = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Thrift\Server\Erp\OrderWare();
              $xfer += $elem12->read($input);
              $this->orderWares []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->insider = new \Thrift\Server\Erp\Insider();
            $xfer += $this->insider->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderfromSource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->placeOrderDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deliverGoodsDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderMakeDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->modifyTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logisticsOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logisticsFirmName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ducumentOrderNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Order');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->takePerson !== null) {
      $xfer += $output->writeFieldBegin('takePerson', TType::STRING, 2);
      $xfer += $output->writeString($this->takePerson);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->takePersonFixedPhone !== null) {
      $xfer += $output->writeFieldBegin('takePersonFixedPhone', TType::STRING, 3);
      $xfer += $output->writeString($this->takePersonFixedPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->takePersonPhone !== null) {
      $xfer += $output->writeFieldBegin('takePersonPhone', TType::STRING, 4);
      $xfer += $output->writeString($this->takePersonPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->takePersonAddress !== null) {
      $xfer += $output->writeFieldBegin('takePersonAddress', TType::STRING, 5);
      $xfer += $output->writeString($this->takePersonAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agio !== null) {
      $xfer += $output->writeFieldBegin('agio', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->agio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IntegererestMoney !== null) {
      $xfer += $output->writeFieldBegin('IntegererestMoney', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->IntegererestMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->factMoney !== null) {
      $xfer += $output->writeFieldBegin('factMoney', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->factMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gatherMoney !== null) {
      $xfer += $output->writeFieldBegin('gatherMoney', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->gatherMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderStatus !== null) {
      $xfer += $output->writeFieldBegin('orderStatus', TType::STRING, 11);
      $xfer += $output->writeString($this->orderStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceOrderNumber !== null) {
      $xfer += $output->writeFieldBegin('sourceOrderNumber', TType::STRING, 12);
      $xfer += $output->writeString($this->sourceOrderNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderWares !== null) {
      if (!is_array($this->orderWares)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderWares', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderWares));
        {
          foreach ($this->orderWares as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->insider !== null) {
      if (!is_object($this->insider)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('insider', TType::STRUCT, 14);
      $xfer += $this->insider->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderfromSource !== null) {
      $xfer += $output->writeFieldBegin('orderfromSource', TType::STRING, 15);
      $xfer += $output->writeString($this->orderfromSource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->placeOrderDate !== null) {
      $xfer += $output->writeFieldBegin('placeOrderDate', TType::STRING, 16);
      $xfer += $output->writeString($this->placeOrderDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliverGoodsDate !== null) {
      $xfer += $output->writeFieldBegin('deliverGoodsDate', TType::STRING, 17);
      $xfer += $output->writeString($this->deliverGoodsDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTime !== null) {
      $xfer += $output->writeFieldBegin('payTime', TType::STRING, 18);
      $xfer += $output->writeString($this->payTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderMakeDate !== null) {
      $xfer += $output->writeFieldBegin('orderMakeDate', TType::STRING, 19);
      $xfer += $output->writeString($this->orderMakeDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modifyTime !== null) {
      $xfer += $output->writeFieldBegin('modifyTime', TType::STRING, 20);
      $xfer += $output->writeString($this->modifyTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logisticsOrder !== null) {
      $xfer += $output->writeFieldBegin('logisticsOrder', TType::STRING, 21);
      $xfer += $output->writeString($this->logisticsOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logisticsFirmName !== null) {
      $xfer += $output->writeFieldBegin('logisticsFirmName', TType::STRING, 22);
      $xfer += $output->writeString($this->logisticsFirmName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ducumentOrderNumber !== null) {
      $xfer += $output->writeFieldBegin('ducumentOrderNumber', TType::STRING, 24);
      $xfer += $output->writeString($this->ducumentOrderNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}