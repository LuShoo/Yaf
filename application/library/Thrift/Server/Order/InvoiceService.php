<?php
namespace Thrift\Server\Order;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface InvoiceServiceIf {
  /**
   * @param string $orderId
   * @return string
   */
  public function createInvoiceByOrderId($orderId);
  /**
   * @param string $orderId
   * @param int $status
   * @param string $receiveTel
   * @param string $receiveName
   * @param string $logiNo
   * @param string $startTime
   * @param string $endTime
   * @param int $isPage
   * @param int $page
   * @param int $size
   * @return \Thrift\Server\Order\PageInvoices
   */
  public function getInvoiceListBySearch($orderId, $status, $receiveTel, $receiveName, $logiNo, $startTime, $endTime, $isPage, $page, $size);
  /**
   * @param \Thrift\Server\Order\Invoice[] $invoices
   * @return string
   */
  public function editInvoiceStatusWithBatch(array $invoices);
  /**
   * @param \Thrift\Server\Order\InvoiceAndDetails[] $invoiceAndDetails
   * @return string
   */
  public function editAndSaveInvoiceDetailWithBatch(array $invoiceAndDetails);
}

class InvoiceService implements \Thrift\Server\Order\InvoiceServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function createInvoiceByOrderId($orderId)
  {
    $this->send_createInvoiceByOrderId($orderId);
    return $this->recv_createInvoiceByOrderId();
  }

  public function send_createInvoiceByOrderId($orderId)
  {
    $args = new \Thrift\Server\Order\InvoiceService_createInvoiceByOrderId_args();
    $args->orderId = $orderId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createInvoiceByOrderId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createInvoiceByOrderId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createInvoiceByOrderId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Order\InvoiceService_createInvoiceByOrderId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Order\InvoiceService_createInvoiceByOrderId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("createInvoiceByOrderId failed: unknown result");
  }

  public function getInvoiceListBySearch($orderId, $status, $receiveTel, $receiveName, $logiNo, $startTime, $endTime, $isPage, $page, $size)
  {
    $this->send_getInvoiceListBySearch($orderId, $status, $receiveTel, $receiveName, $logiNo, $startTime, $endTime, $isPage, $page, $size);
    return $this->recv_getInvoiceListBySearch();
  }

  public function send_getInvoiceListBySearch($orderId, $status, $receiveTel, $receiveName, $logiNo, $startTime, $endTime, $isPage, $page, $size)
  {
    $args = new \Thrift\Server\Order\InvoiceService_getInvoiceListBySearch_args();
    $args->orderId = $orderId;
    $args->status = $status;
    $args->receiveTel = $receiveTel;
    $args->receiveName = $receiveName;
    $args->logiNo = $logiNo;
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $args->isPage = $isPage;
    $args->page = $page;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInvoiceListBySearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInvoiceListBySearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInvoiceListBySearch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Order\InvoiceService_getInvoiceListBySearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Order\InvoiceService_getInvoiceListBySearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getInvoiceListBySearch failed: unknown result");
  }

  public function editInvoiceStatusWithBatch(array $invoices)
  {
    $this->send_editInvoiceStatusWithBatch($invoices);
    return $this->recv_editInvoiceStatusWithBatch();
  }

  public function send_editInvoiceStatusWithBatch(array $invoices)
  {
    $args = new \Thrift\Server\Order\InvoiceService_editInvoiceStatusWithBatch_args();
    $args->invoices = $invoices;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editInvoiceStatusWithBatch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editInvoiceStatusWithBatch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editInvoiceStatusWithBatch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Order\InvoiceService_editInvoiceStatusWithBatch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Order\InvoiceService_editInvoiceStatusWithBatch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("editInvoiceStatusWithBatch failed: unknown result");
  }

  public function editAndSaveInvoiceDetailWithBatch(array $invoiceAndDetails)
  {
    $this->send_editAndSaveInvoiceDetailWithBatch($invoiceAndDetails);
    return $this->recv_editAndSaveInvoiceDetailWithBatch();
  }

  public function send_editAndSaveInvoiceDetailWithBatch(array $invoiceAndDetails)
  {
    $args = new \Thrift\Server\Order\InvoiceService_editAndSaveInvoiceDetailWithBatch_args();
    $args->invoiceAndDetails = $invoiceAndDetails;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'editAndSaveInvoiceDetailWithBatch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('editAndSaveInvoiceDetailWithBatch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_editAndSaveInvoiceDetailWithBatch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Thrift\Server\Order\InvoiceService_editAndSaveInvoiceDetailWithBatch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Thrift\Server\Order\InvoiceService_editAndSaveInvoiceDetailWithBatch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("editAndSaveInvoiceDetailWithBatch failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class InvoiceService_createInvoiceByOrderId_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_createInvoiceByOrderId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_createInvoiceByOrderId_args');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvoiceService_createInvoiceByOrderId_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_createInvoiceByOrderId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_createInvoiceByOrderId_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvoiceService_getInvoiceListBySearch_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $receiveTel = null;
  /**
   * @var string
   */
  public $receiveName = null;
  /**
   * @var string
   */
  public $logiNo = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $isPage = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'receiveTel',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'receiveName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'logiNo',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'isPage',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['receiveTel'])) {
        $this->receiveTel = $vals['receiveTel'];
      }
      if (isset($vals['receiveName'])) {
        $this->receiveName = $vals['receiveName'];
      }
      if (isset($vals['logiNo'])) {
        $this->logiNo = $vals['logiNo'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['isPage'])) {
        $this->isPage = $vals['isPage'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_getInvoiceListBySearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveTel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logiNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->isPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_getInvoiceListBySearch_args');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I16, 2);
      $xfer += $output->writeI16($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveTel !== null) {
      $xfer += $output->writeFieldBegin('receiveTel', TType::STRING, 3);
      $xfer += $output->writeString($this->receiveTel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveName !== null) {
      $xfer += $output->writeFieldBegin('receiveName', TType::STRING, 4);
      $xfer += $output->writeString($this->receiveName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logiNo !== null) {
      $xfer += $output->writeFieldBegin('logiNo', TType::STRING, 5);
      $xfer += $output->writeString($this->logiNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 6);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 7);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPage !== null) {
      $xfer += $output->writeFieldBegin('isPage', TType::I16, 8);
      $xfer += $output->writeI16($this->isPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 9);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 10);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvoiceService_getInvoiceListBySearch_result {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Order\PageInvoices
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Thrift\Server\Order\PageInvoices',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_getInvoiceListBySearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Thrift\Server\Order\PageInvoices();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_getInvoiceListBySearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvoiceService_editInvoiceStatusWithBatch_args {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Order\Invoice[]
   */
  public $invoices = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invoices',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Order\Invoice',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invoices'])) {
        $this->invoices = $vals['invoices'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_editInvoiceStatusWithBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->invoices = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Thrift\Server\Order\Invoice();
              $xfer += $elem40->read($input);
              $this->invoices []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_editInvoiceStatusWithBatch_args');
    if ($this->invoices !== null) {
      if (!is_array($this->invoices)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invoices', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invoices));
        {
          foreach ($this->invoices as $iter41)
          {
            $iter41 = new \Thrift\Server\Order\Invoice($iter41);
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvoiceService_editInvoiceStatusWithBatch_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_editInvoiceStatusWithBatch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_editInvoiceStatusWithBatch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvoiceService_editAndSaveInvoiceDetailWithBatch_args {
  static $_TSPEC;

  /**
   * @var \Thrift\Server\Order\InvoiceAndDetails[]
   */
  public $invoiceAndDetails = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invoiceAndDetails',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\Server\Order\InvoiceAndDetails',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invoiceAndDetails'])) {
        $this->invoiceAndDetails = $vals['invoiceAndDetails'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_editAndSaveInvoiceDetailWithBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->invoiceAndDetails = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \Thrift\Server\Order\InvoiceAndDetails();
              $xfer += $elem47->read($input);
              $this->invoiceAndDetails []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_editAndSaveInvoiceDetailWithBatch_args');
    if ($this->invoiceAndDetails !== null) {
      if (!is_array($this->invoiceAndDetails)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invoiceAndDetails', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invoiceAndDetails));
        {
          foreach ($this->invoiceAndDetails as $iter48)
          {
            $iter48 = new \Thrift\Server\Order\InvoiceAndDetails($iter48);
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvoiceService_editAndSaveInvoiceDetailWithBatch_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'InvoiceService_editAndSaveInvoiceDetailWithBatch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceService_editAndSaveInvoiceDetailWithBatch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


