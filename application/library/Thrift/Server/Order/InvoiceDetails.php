<?php
namespace Thrift\Server\Order;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class InvoiceDetails {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $orderId = null;
  /**
   * @var string
   */
  public $productName = null;
  /**
   * @var string
   */
  public $sncode = null;
  /**
   * @var string
   */
  public $attrbutes = null;
  /**
   * @var string
   */
  public $firm = null;
  /**
   * @var string
   */
  public $iccid = null;
  /**
   * @var string
   */
  public $simPackage = null;
  /**
   * @var string
   */
  public $logiName = null;
  /**
   * @var string
   */
  public $logiNo = null;
  /**
   * @var string
   */
  public $deliveryAt = null;
  /**
   * @var string
   */
  public $createdAt = null;
  /**
   * @var string
   */
  public $updatedAt = null;
  /**
   * @var string
   */
  public $mmcSize = null;
  /**
   * @var int
   */
  public $productId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'productName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sncode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'attrbutes',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'firm',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'iccid',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'simPackage',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'logiName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'logiNo',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'deliveryAt',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'createdAt',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'updatedAt',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'mmcSize',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['productName'])) {
        $this->productName = $vals['productName'];
      }
      if (isset($vals['sncode'])) {
        $this->sncode = $vals['sncode'];
      }
      if (isset($vals['attrbutes'])) {
        $this->attrbutes = $vals['attrbutes'];
      }
      if (isset($vals['firm'])) {
        $this->firm = $vals['firm'];
      }
      if (isset($vals['iccid'])) {
        $this->iccid = $vals['iccid'];
      }
      if (isset($vals['simPackage'])) {
        $this->simPackage = $vals['simPackage'];
      }
      if (isset($vals['logiName'])) {
        $this->logiName = $vals['logiName'];
      }
      if (isset($vals['logiNo'])) {
        $this->logiNo = $vals['logiNo'];
      }
      if (isset($vals['deliveryAt'])) {
        $this->deliveryAt = $vals['deliveryAt'];
      }
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
      if (isset($vals['updatedAt'])) {
        $this->updatedAt = $vals['updatedAt'];
      }
      if (isset($vals['mmcSize'])) {
        $this->mmcSize = $vals['mmcSize'];
      }
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
    }
  }

  public function getName() {
    return 'InvoiceDetails';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sncode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->attrbutes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->firm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iccid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->simPackage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logiName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logiNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deliveryAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updatedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mmcSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvoiceDetails');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 2);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productName !== null) {
      $xfer += $output->writeFieldBegin('productName', TType::STRING, 3);
      $xfer += $output->writeString($this->productName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sncode !== null) {
      $xfer += $output->writeFieldBegin('sncode', TType::STRING, 4);
      $xfer += $output->writeString($this->sncode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attrbutes !== null) {
      $xfer += $output->writeFieldBegin('attrbutes', TType::STRING, 5);
      $xfer += $output->writeString($this->attrbutes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firm !== null) {
      $xfer += $output->writeFieldBegin('firm', TType::STRING, 6);
      $xfer += $output->writeString($this->firm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iccid !== null) {
      $xfer += $output->writeFieldBegin('iccid', TType::STRING, 7);
      $xfer += $output->writeString($this->iccid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->simPackage !== null) {
      $xfer += $output->writeFieldBegin('simPackage', TType::STRING, 8);
      $xfer += $output->writeString($this->simPackage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logiName !== null) {
      $xfer += $output->writeFieldBegin('logiName', TType::STRING, 9);
      $xfer += $output->writeString($this->logiName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logiNo !== null) {
      $xfer += $output->writeFieldBegin('logiNo', TType::STRING, 10);
      $xfer += $output->writeString($this->logiNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveryAt !== null) {
      $xfer += $output->writeFieldBegin('deliveryAt', TType::STRING, 11);
      $xfer += $output->writeString($this->deliveryAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::STRING, 12);
      $xfer += $output->writeString($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedAt !== null) {
      $xfer += $output->writeFieldBegin('updatedAt', TType::STRING, 13);
      $xfer += $output->writeString($this->updatedAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mmcSize !== null) {
      $xfer += $output->writeFieldBegin('mmcSize', TType::STRING, 14);
      $xfer += $output->writeString($this->mmcSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 15);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}